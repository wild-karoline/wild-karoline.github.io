---
layout: post
title:  "Pointer (ukazatel)"
date:   2023-10-09 07:00:00 +0200
last_modified_at: 2023-10-09 07:00:00 +0200
category: Programovací jazyk C
read_time: 9 min 7 s
description: Ukazatele v programovacím jazyce C.
permalink: programovaci-jazyk-c/pointer
---

[Předchozí [Preprocesor]]({% post_url c/2023-10-05-preprocesor %})

*Varuju předem - ukazatele patří mezi náročnější témata a je třeba se jim věnovat a pořádně se s nimi obeznámit!*

Pointer, nebo také ukazatel či reference, představuje adresu, očíslované místo v paměti, kde se proměnná nachází. Pointer může ukazovat i na jiný pointer:

{% highlight c %}
//...
int promenna = 100;
int* pointer_na_promennou = &promenna;
int** pointer_na_pointer = &pointer_na_promennou;
//... {% endhighlight %}

Ve spojitosti s ukazateli používáme následující operátory:
- unární adresový operátor & - navrátí nám adresu vybrané proměnné (setkali jsme se s ním například při použití funkce scanf)
- dereference * - přes tento operátor se dostaneme k proměnné na určité adrese
- deklarace ukazatelů probíhá rovněž pomocí *

A jako vždy malá ukázka:

{% highlight c %}
#include <stdio.h>

int main()
{
  int vek = -1;
  int *ukazatel = &vek;

  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  printf("Zadej prosim svuj vek.\n");
  printf("Vek: ");
  scanf("%d", &vek);
  
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  return 0;
} {% endhighlight %}

V ukázce máme proměnnou "vek" a ukazatel na onu proměnou. Všimněte si, že při deklaraci je vždy potřeba udat typ, na který bude ukazatel ukazovat, a operátor dereference. V našem případě tedy int \*. A protože pointer, neboli ukazatel, ukazuje na adresu, uložíme ji do něj pomocí &-operátoru. Na konzoli si můžete hodnotu ukazatele vytisknout pomocí %p. Výsledkem je místo v paměti znázorněné v hexadecimální formě (kromě desítkové soustavy existují i další - dvojková, osmičková nebo právě šestnáctková).

Všimněte si zástupného symbolu - pro pointery, neboli adresy je to format specifier %p (více zástupných symbolů jsme si ukázali ve druhé kapitole).

Změníme-li hodnotu proměnné "věk", je možné tuto změnu vidět i přes ukazatel, protože ukazuje na to místo v paměti, kde je hodnota proměnné "věk" uložená. Tuto hodnotu lze změnit i přes pointer:

{% highlight c %}
#include <stdio.h>

int main()
{
  int vek = -1;
  int *ukazatel = &vek;

  printf("--- 1 ---\n");
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  printf("Zadej prosim svuj vek.\n");
  printf("Vek: ");
  scanf("%d", &vek);

  printf("--- 2 ---\n");
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  *ukazatel = -3;

  printf("--- 3 ---\n");
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);
  return 0;
} {% endhighlight %}

Pro zajímavost si můžete zkusit oba operátory (adress-of a dereference) zkombinovat. Také se můžete podívat na adresu ukazatele - je to adresa, kde je uložená adresa naší proměnné "věk".

{% highlight c %}
#include <stdio.h>

int main()
{
  int vek = -1;
  int *ukazatel = &vek;

  printf("--- 1 ---\n");
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  printf("Zadej prosim svuj vek.\n");
  printf("Vek: ");
  scanf("%d", &vek);

  printf("--- 2 ---\n");
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  *ukazatel = -3;

  printf("--- 3 ---\n");
  printf("Adresa promenne: %p, hodnota: %d\n", ukazatel, *ukazatel);
  printf("To same jinak: %p, %d\n", &vek, vek);

  printf("\n--- 4 ---\n");
  printf("Pro zajimavost: %d\n", *(&vek));
  printf("Adresa ukazatele: %p\n", &ukazatel);
  return 0;
} {% endhighlight %}

([Odkaz na GitHub](https://github.com/wild-karoline/C/blob/main/14-pointer/ukazatele.c){:target="_blank"})

## Speciální ukazatele

### NULL-pointer

NULL-pointer je speciální typ ukazatele. Tento ukazatel je možné použít pro inicializaci v případě, že adresa, kterou má ukazatel uchovat, ještě není známá. 

Hodnota NULL je speciální preprocesorové makro, které se nachází v stdio.h (více k preprocesoru v předchozí kapitole). NULL-pointer jako návratová hodnota v programování značí problém či chybu.

NULL-pointer by se neměl dereferencovat kvůli neshodám v typu! NULL-pointer není nic jiného než ((void*) 0).

### void-pointer

Ukazatel typu void je pointer, který může ukazovat na jakýkoli objekt, jeho užití je tzv. generické. Dereferencování void-pointeru je zakázané (stejně jako NULL-pointeru), důvodem jsou problémy mezi převody mezi jednotlivými datovými typy (typecasting).

## Call-by-value a call-by-reference

V případě call-by-value je funkci předána kopie proměnné. Funkce pak má k dispozici onu kopii, se kterou pracuje, původní proměnná se nemění.

{% highlight c %}
#include <stdio.h>

void dvojnasobek(int a)
{
  a *= 2;
  printf("a ve funkci dvojnasobek: %d\n", a);
}

int main()
{
  int a = 3;
  printf("a ve funkci main: %d\n", a);
  dvojnasobek(a);
  printf("a ve funkci main: %d\n", a);

  return 0;
} {% endhighlight %}

([Odkaz na GitHub](https://github.com/wild-karoline/C/blob/main/14-pointer/callbyvalue.c){:target="_blank"})

V případě call-by-reference je však funkci předána reference, adresa proměnné. Tím, že má funkce přístup k místu v paměti, kde je hodnota proměnné uložená, projeví se změny i všude jinde, kde se s danou adresou/proměnnou pracuje.

{% highlight c %}
#include <stdio.h>

void dvojnasobek(int* a)
{
  *a *= 2;
  printf("a ve funkci dvojnasobek: %d\n", *a);
}

int main()
{
  int a = 3;
  printf("a ve funkci main pred: %d\n", a);
  dvojnasobek(&a);
  printf("a ve funkci main po: %d\n", a);

  return 0;
} {% endhighlight %}

([Odkaz na GitHub](https://github.com/wild-karoline/C/blob/main/14-pointer/callbyreference.c){:target="_blank"})

Všimněte si malých změn v kódu. Funkce "dvojnasobek" má tentokrát ukazatel jako parametr, tzn. že očekává adresu proměnné. Funkci pak voláme tak, že jí předáme adresu pomocí &-operátoru.

Přijde vám to povědomé? Úplně stejně jsme používali funkci scanf. Aby se změny, příjem hodnoty, projevily na proměnné, bylo třeba funkci scanf předat adresu oné proměnné. Viz příklad úplně nahoře, zde jen výstřižek:

{% highlight c %}
#include <stdio.h>

int main()
{
  ...
  printf("Zadej prosim svuj vek.\n");
  printf("Vek: ");
  scanf("%d", &vek);
  ...

  return 0;
} {% endhighlight %}

## Využití pointerů

### Call-by-reference

Jak funguje call-by-reference jsme si vysvětlili o kousek výše. K čemu je to ale dobré? Kromě scanf například k tomu, že jsme schopni v jedné funkci upravit a "vrátit" vícero hodnot.

Normálně má funkce jedinou návratovou hodnotu. Pokud jí však předáme adresy, pak je schopná s nimi pracovat a upravovat hodnoty tak, aby se změny projevily i vně funkce.

Představte si příklad, kdy máte počet hodin a rádi byste je převedli na údaj v týdnech, dnech a zbylých hodinách.

{% highlight c %}
#include <stdio.h>

#define HODIN_ZA_DEN 24
#define DNU_V_TYDNU 7

void prevodHodin(int casovy_udaj, int *tydny, int *dny, int *hodiny)
{
  *tydny = casovy_udaj / (DNU_V_TYDNU * HODIN_ZA_DEN);
  *dny = casovy_udaj / HODIN_ZA_DEN - *tydny * DNU_V_TYDNU;
  *hodiny = casovy_udaj % HODIN_ZA_DEN;
}

int main()
{
  int casovy_udaj = 0;
  printf("Zadej pocet hodin: ");
  scanf("%d", &casovy_udaj);
  
  int tydny, dny, hodiny;
  prevodHodin(casovy_udaj, &tydny, &dny, &hodiny);

  printf("\n%d hodin je %d tydny, %d dny a %d hodin\n", casovy_udaj, tydny, dny, hodiny);

  return 0;
} {% endhighlight %}

([Odkaz na GitHub](https://github.com/wild-karoline/C/blob/main/14-pointer/prevodhodin.c){:target="_blank"})

Tím, že funkce "prevodHodin" pracovala s adresami proměnných, mohla ovlivnit víc než pouze jednu (návratovou) hodnotu.

Dalším typickým příkladem je prohození hodnot dvou proměnných:

{% highlight c %}
#include <stdio.h>

void prohozeni(int* x, int *y)
{
  printf("Ve funkci 'prohozeni'\n");
  printf("x: %d, y: %d\n", *x, *y);
  
  int tmp = *x;
  *x = *y;
  *y = tmp;
  printf("Pro prohozeni\n");
  printf("x: %d, y: %d\n", *x, *y);
}

int main()
{
  int x = 3;
  int y = 5;

  printf("V main\n");
  printf("x: %d, y: %d\n", x, y);

  prohozeni(&x, &y);

  printf("V main po prohozeni\n");
  printf("x: %d, y: %d\n", x, y);

  return 0;
} {% endhighlight %}

([Odkaz na GitHub](https://github.com/wild-karoline/C/blob/main/14-pointer/prohozeni.c){:target="_blank"})

### Aritmetika ukazatelů

I s ukazateli je možné počítat. Je možné s nimi provádět sčítání, odečítání a srovnávání a používá se hlavně v kombinaci s datovými poli.

Podívejte se na následující příklad a zkuste si tipnout, jaký bude výstup:

{% highlight c %}
#include <stdio.h>

void ukazPole(int pole[])
{
  printf("Velikost pole: %lu\n", sizeof(pole));
  // printf("Pole: %d\n", pole);
  printf("Pole: %p\n", pole);
  printf("Pole*: %d\n", *pole);
}

int main()
{
  int pole[] = {3, 2, 1};
  printf("Velikost pole v main: %lu\n", sizeof(pole));
  ukazPole(pole);

  return 0;
} {% endhighlight %}

([Odkaz na GitHub](https://github.com/wild-karoline/C/blob/main/14-pointer/aritmetikaukazatelu.c){:target="_blank"})

Ať už jste si tipli, nebo si program rovnou přeložili a spustili, pojďme si ho rozebrat společně.

První, na co v kódu narážím, je velikost pole. Velikost pole v main je jiná než ta, kterou nám program vyhodí ve funkci "ukazPole"! Kouzlo spočívá v tom, že v main nám vyjede očekávaná velikost pole - počet prvků krát velikost datového typu int (tedy 12 bytů). Kdežto do funkce se nám dostává pouze ukazatel na první element. A pointer má (u mě; může se jinde lišit) 8 bytů. Jestli jste si už někdy dříve zkusili měnit obsah datového pole ve funkci, možná jste si všimli, že se změny projevily i v datovém poli v main - a to je právě z toho důvodu, že funkci je vždy předáván ukazatel na první element, adresa a ne kopie hodnot (viz call-by-reference výše).

S tím souvisí i další řádek ve funkci. Když si na konzoli vydáte pole (s pomocí %p) a v main si zkusíte vytisknout adresu prvního elementu (s pomocí %p a &pole[0]) zjistíte, že se jedná o jednu a tu samou adresu v paměti.

A poslední řádek je dereference tak, jak jsme si ukázali výše. Poněvadž pole ukazuje na první element v datovém poli, je možné se dostat k hodnotě na tomto místě v paměti právě přes dereferenci.

A v čem tedy spočívá aritmetika ukazatelů? Ukázali jsme si v jedné z předchozích kapitol, jak je možné získat přístup k jednotlivým hodnotám datového pole přes operátor indexu ([]). Stejně tak je možné se k hodnotám dostat přes dereferenci přes ukazatel.

Následují ukázky práce s datovými poli a ukazateli. Všimněte si, že mezi parametry je i velikost (pole). Je to právě kvůli tomu, že s předaného pole jeho skutečnou velikost nezjistíme, protože nepředáváme vlastně pole, nýbrž pouze adresu prvního elementu, jak popsáno výše.

{% highlight c %}
#include <stdio.h>

double prumer1(int pole[], int velikost)
{
  double soucet = 0;
  for (int i = 0; i < velikost; i++)
  {
    soucet += pole[i];
  }

  return soucet / velikost;
}

int main()
{
  int pole[] = { 1, 3, 5, 7, 3 ,8 };
  printf("Data: ");
  for (int i = 0; i < sizeof(pole) / sizeof(int); i++)
  {
    printf("%d ", pole[i]);
  }
  printf("\n");

  printf("Prumer1: %.2f\n", prumer1(pole, sizeof(pole)/sizeof(int)));

  return 0;
} {% endhighlight %}

Příklad nahoře by měl představovat opakování. Jednotlivé prvky datového pole jsme si nechali vyjet pomocí smyčky a indexu.

A takto lze v parametru zaměnit pole s pointerem:

{% highlight c %}
#include <stdio.h>

double prumer2(int* pole, int velikost)
{
  double soucet = 0;
  for (int i = 0; i < velikost; i++)
  {
    soucet += pole[i];
  }

  return soucet / velikost;
}

int main()
{
  ...

  printf("Prumer2: %.2f\n", prumer2(pole, sizeof(pole)/sizeof(int)));

  return 0;
} {% endhighlight %}

A takhle by vypadalo sčítání, tedy aritmetika v souvislosti s ukazateli a datovými poli:

{% highlight c %}
#include <stdio.h>

double prumer3(int* pole, int velikost)
{
  double soucet = 0;
  for (int i = 0; i < velikost; i++)
  {
    soucet += *(pole + i);
  }

  return soucet / velikost;
}

int main()
{
  ...

  printf("Prumer3: %.2f\n", prumer3(pole, sizeof(pole)/sizeof(int)));

  return 0;
} {% endhighlight %}

Pole ve funkci nám ukazuje na první element. Když k němu přičteme 1, je to automaticky interpretováno jako skok v paměti o 1 místo, v případě int skok o 4 byty na další hodnotu.

Všechny 3 funkce najdete pod tímto [odkazem](https://github.com/wild-karoline/C/blob/main/14-pointer/prumer.c){:target="_blank"} na GitHubu.

Pozor na tzv. operator precedence, tedy v jakém pořadí překladač vyhodnocuje operátory. Jako i v minulých kapitolách platí - nešetřete závorkami.

{% highlight c %}
#include <stdio.h>

double prumer1(int pole[], int velikost)
{
  double soucet = 0;
  for (int i = 0; i < velikost; i++)
  {
    soucet += pole[i];
  }

  return soucet / velikost;
}

int main()
{
  int pole[] = { 1, 4, 9 };
  
  printf("Prvek na druhem miste?: %d\n", *pole + 1);
  printf("Prvek na druhem miste?: %d\n", *(pole + 1));
  return 0;
} {% endhighlight %}

První printf si vezme hodnotu na adrese pole, tedy hodnotu prvního prvku a přičte k ní 1. Druhý printf je až ten správný - vezme adresu prvního prvku, poskočí o jedno místo a až pak si vybere hodnotu na této adrese.

#### Return array

Pozor, tohle je chyták. Pokud byste zkusili z funkce vrátit array, vracíte pouze adresu, na které ale po opuštění funkce už nemusí být hodnoty, které jste tam původně daly! Jakmile program opouští funkci, uvolňuje paměť, kterou funkce držela a využívala.

P.S.: Zkuste si to, ať to jednou vidíte v akci.

### Pointer a 2D datové pole

V případě dvoudimenzionální array proměnné s názvem "pole" by:
- *pole* byl ukazatel na první element
- *pole[1]* ukazatel na druhý řádek 2D pole
- a *pole[i][j]* by bylo to samé jako:
  - *\*(pole[i] + j)*
  - *(\*(pole + i)[j])*
  - *\*((\*(pole + i)) + j)*

### Function pointer

Ukazatel nemusí odkazovat pouze na data, ale může také ukazovat na jiný kód. To nám umožňuje mít ukazatele na funkce.

Využití naleznou například tehdy, když chceme simulovat objektově orientované programování v C, nebo při tzv. "callbacks".

Jejich nebezpečí spočívá v tom, že není možné předem (před vlastním provedením kódu) zkontrolovat, jestli pointer vůbec ukazuje na funkci s odpovídajícím podpisem (parametry, návratovou hodnotou).

## Shrnutí

- Ukazatel v sobě uchovává adresu jiné proměnné
- Speciální typy pointerů jsou NULL-pointer a void-pointer
- Přes ukazatel můžeme získat přístup k určitým místům datového pole (aritmetika ukazatelů)
- Je také možné referencovat jiné ukazatele nebo funkce 

A tip na konec: Nenechte se touhle kapitolou nijak rozhodit. Bývá trochu těžší to všechno pobrat, ale uvidíte, že to s časem bude lepší. Nevadí, když nebude sedět vše hned na první dobrou, ono to přijde s tím, jak budete víc a víc kódit.

## Kam dál?

*\-TBD\-*
